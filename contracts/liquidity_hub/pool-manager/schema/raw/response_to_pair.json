{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NPairInfo",
  "type": "object",
  "required": [
    "asset_decimals",
    "asset_infos",
    "assets",
    "balances",
    "liquidity_token",
    "pair_type",
    "pool_fees"
  ],
  "properties": {
    "asset_decimals": {
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      }
    },
    "asset_infos": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetInfo"
      }
    },
    "assets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Asset"
      }
    },
    "balances": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Uint128"
      }
    },
    "liquidity_token": {
      "$ref": "#/definitions/AssetInfo"
    },
    "pair_type": {
      "$ref": "#/definitions/PairType"
    },
    "pool_fees": {
      "$ref": "#/definitions/PoolFee"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Fee": {
      "type": "object",
      "required": [
        "share"
      ],
      "properties": {
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "PairType": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "constant_product"
          ]
        },
        {
          "type": "object",
          "required": [
            "stable_swap"
          ],
          "properties": {
            "stable_swap": {
              "type": "object",
              "required": [
                "amp"
              ],
              "properties": {
                "amp": {
                  "description": "The amount of amplification to perform on the constant product part of the swap formula.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolFee": {
      "description": "Fees used by the pools on the pool network",
      "type": "object",
      "required": [
        "burn_fee",
        "protocol_fee",
        "swap_fee"
      ],
      "properties": {
        "burn_fee": {
          "$ref": "#/definitions/Fee"
        },
        "protocol_fee": {
          "$ref": "#/definitions/Fee"
        },
        "swap_fee": {
          "$ref": "#/definitions/Fee"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
