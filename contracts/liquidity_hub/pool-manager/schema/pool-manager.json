{
  "contract_name": "pool-manager",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "fee_collector_addr",
      "owner",
      "pool_creation_fee"
    ],
    "properties": {
      "fee_collector_addr": {
        "type": "string"
      },
      "owner": {
        "type": "string"
      },
      "pool_creation_fee": {
        "$ref": "#/definitions/Coin"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "create_pair"
        ],
        "properties": {
          "create_pair": {
            "type": "object",
            "required": [
              "asset_denoms",
              "pair_type",
              "pool_fees",
              "token_factory_lp"
            ],
            "properties": {
              "asset_denoms": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "pair_identifier": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "pair_type": {
                "$ref": "#/definitions/PairType"
              },
              "pool_fees": {
                "$ref": "#/definitions/PoolFee"
              },
              "token_factory_lp": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Provides liquidity to the pool",
        "type": "object",
        "required": [
          "provide_liquidity"
        ],
        "properties": {
          "provide_liquidity": {
            "type": "object",
            "required": [
              "assets",
              "pair_identifier"
            ],
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "pair_identifier": {
                "type": "string"
              },
              "receiver": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "slippage_tolerance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Swap an offer asset to the other",
        "type": "object",
        "required": [
          "swap"
        ],
        "properties": {
          "swap": {
            "type": "object",
            "required": [
              "ask_asset_denom",
              "offer_asset",
              "pair_identifier"
            ],
            "properties": {
              "ask_asset_denom": {
                "type": "string"
              },
              "belief_price": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_spread": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "offer_asset": {
                "$ref": "#/definitions/Coin"
              },
              "pair_identifier": {
                "type": "string"
              },
              "to": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw_liquidity"
        ],
        "properties": {
          "withdraw_liquidity": {
            "type": "object",
            "required": [
              "assets",
              "pair_identifier"
            ],
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "pair_identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds native token info to the contract so it can instantiate pair contracts that include it",
        "type": "object",
        "required": [
          "add_native_token_decimals"
        ],
        "properties": {
          "add_native_token_decimals": {
            "type": "object",
            "required": [
              "decimals",
              "denom"
            ],
            "properties": {
              "decimals": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute multiple [`SwapOperations`] to allow for multi-hop swaps.",
        "type": "object",
        "required": [
          "execute_swap_operations"
        ],
        "properties": {
          "execute_swap_operations": {
            "type": "object",
            "required": [
              "operations"
            ],
            "properties": {
              "max_spread": {
                "description": "The (optional) maximum spread to incur when performing any swap.\n\nIf left unspecified, there is no limit to what spread the transaction can incur.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "minimum_receive": {
                "description": "The minimum amount of the output (i.e., final swap operation token) required for the message to succeed.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "operations": {
                "description": "The operations that should be performed in sequence.\n\nThe amount in each swap will be the output from the previous swap.\n\nThe first swap will use whatever funds are sent in the [`MessageInfo`].",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SwapOperation"
                }
              },
              "to": {
                "description": "The (optional) recipient of the output tokens.\n\nIf left unspecified, tokens will be sent to the sender of the message.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds swap routes to the router.",
        "type": "object",
        "required": [
          "add_swap_routes"
        ],
        "properties": {
          "add_swap_routes": {
            "type": "object",
            "required": [
              "swap_routes"
            ],
            "properties": {
              "swap_routes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SwapRoute"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Fee": {
        "type": "object",
        "required": [
          "share"
        ],
        "properties": {
          "share": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "PairType": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "constant_product"
            ]
          },
          {
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "required": [
                  "amp"
                ],
                "properties": {
                  "amp": {
                    "description": "The amount of amplification to perform on the constant product part of the swap formula.",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolFee": {
        "description": "Fees used by the pools on the pool network",
        "type": "object",
        "required": [
          "burn_fee",
          "protocol_fee",
          "swap_fee"
        ],
        "properties": {
          "burn_fee": {
            "$ref": "#/definitions/Fee"
          },
          "protocol_fee": {
            "$ref": "#/definitions/Fee"
          },
          "swap_fee": {
            "$ref": "#/definitions/Fee"
          }
        },
        "additionalProperties": false
      },
      "SwapOperation": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "whale_swap"
            ],
            "properties": {
              "whale_swap": {
                "type": "object",
                "required": [
                  "pool_identifier",
                  "token_in_denom",
                  "token_out_denom"
                ],
                "properties": {
                  "pool_identifier": {
                    "type": "string"
                  },
                  "token_in_denom": {
                    "type": "string"
                  },
                  "token_out_denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SwapRoute": {
        "type": "object",
        "required": [
          "ask_asset_denom",
          "offer_asset_denom",
          "swap_operations"
        ],
        "properties": {
          "ask_asset_denom": {
            "type": "string"
          },
          "offer_asset_denom": {
            "type": "string"
          },
          "swap_operations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwapOperation"
            }
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Retrieves the decimals for the given native or ibc denom.",
        "type": "object",
        "required": [
          "native_token_decimals"
        ],
        "properties": {
          "native_token_decimals": {
            "type": "object",
            "required": [
              "denom"
            ],
            "properties": {
              "denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Simulates a swap.",
        "type": "object",
        "required": [
          "simulation"
        ],
        "properties": {
          "simulation": {
            "type": "object",
            "required": [
              "ask_asset",
              "offer_asset",
              "pair_identifier"
            ],
            "properties": {
              "ask_asset": {
                "$ref": "#/definitions/Coin"
              },
              "offer_asset": {
                "$ref": "#/definitions/Coin"
              },
              "pair_identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Simulates a reverse swap, i.e. given the ask asset, how much of the offer asset is needed to perform the swap.",
        "type": "object",
        "required": [
          "reverse_simulation"
        ],
        "properties": {
          "reverse_simulation": {
            "type": "object",
            "required": [
              "ask_asset",
              "offer_asset",
              "pair_identifier"
            ],
            "properties": {
              "ask_asset": {
                "$ref": "#/definitions/Coin"
              },
              "offer_asset": {
                "$ref": "#/definitions/Coin"
              },
              "pair_identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets the swap route for the given offer and ask assets.",
        "type": "object",
        "required": [
          "swap_route"
        ],
        "properties": {
          "swap_route": {
            "type": "object",
            "required": [
              "ask_asset_denom",
              "offer_asset_denom"
            ],
            "properties": {
              "ask_asset_denom": {
                "type": "string"
              },
              "offer_asset_denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Gets all swap routes registered",
        "type": "object",
        "required": [
          "swap_routes"
        ],
        "properties": {
          "swap_routes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pair"
        ],
        "properties": {
          "pair": {
            "type": "object",
            "required": [
              "pair_identifier"
            ],
            "properties": {
              "pair_identifier": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query the contract's ownership information",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "native_token_decimals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NativeTokenDecimalsResponse",
      "type": "object",
      "required": [
        "decimals"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_String",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "type": [
            "string",
            "null"
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "pair": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NPairInfo",
      "type": "object",
      "required": [
        "asset_decimals",
        "asset_denoms",
        "assets",
        "balances",
        "liquidity_token",
        "pair_type",
        "pool_fees"
      ],
      "properties": {
        "asset_decimals": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "asset_denoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "liquidity_token": {
          "type": "string"
        },
        "pair_type": {
          "$ref": "#/definitions/PairType"
        },
        "pool_fees": {
          "$ref": "#/definitions/PoolFee"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Fee": {
          "type": "object",
          "required": [
            "share"
          ],
          "properties": {
            "share": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "PairType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "constant_product"
              ]
            },
            {
              "type": "object",
              "required": [
                "stable_swap"
              ],
              "properties": {
                "stable_swap": {
                  "type": "object",
                  "required": [
                    "amp"
                  ],
                  "properties": {
                    "amp": {
                      "description": "The amount of amplification to perform on the constant product part of the swap formula.",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolFee": {
          "description": "Fees used by the pools on the pool network",
          "type": "object",
          "required": [
            "burn_fee",
            "protocol_fee",
            "swap_fee"
          ],
          "properties": {
            "burn_fee": {
              "$ref": "#/definitions/Fee"
            },
            "protocol_fee": {
              "$ref": "#/definitions/Fee"
            },
            "swap_fee": {
              "$ref": "#/definitions/Fee"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "reverse_simulation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ReverseSimulationResponse",
      "description": "ReverseSimulationResponse returns reverse swap simulation response",
      "type": "object",
      "required": [
        "burn_fee_amount",
        "offer_amount",
        "protocol_fee_amount",
        "spread_amount",
        "swap_fee_amount"
      ],
      "properties": {
        "burn_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "offer_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "protocol_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "spread_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "swap_fee_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "simulation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulationResponse",
      "description": "SimulationResponse returns swap simulation response",
      "type": "object",
      "required": [
        "burn_fee_amount",
        "protocol_fee_amount",
        "return_amount",
        "spread_amount",
        "swap_fee_amount"
      ],
      "properties": {
        "burn_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "protocol_fee_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "return_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "spread_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "swap_fee_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "swap_route": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_SwapOperation",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SwapOperation"
      },
      "definitions": {
        "SwapOperation": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "whale_swap"
              ],
              "properties": {
                "whale_swap": {
                  "type": "object",
                  "required": [
                    "pool_identifier",
                    "token_in_denom",
                    "token_out_denom"
                  ],
                  "properties": {
                    "pool_identifier": {
                      "type": "string"
                    },
                    "token_in_denom": {
                      "type": "string"
                    },
                    "token_out_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "swap_routes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_SwapRouteResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/SwapRouteResponse"
      },
      "definitions": {
        "SwapOperation": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "whale_swap"
              ],
              "properties": {
                "whale_swap": {
                  "type": "object",
                  "required": [
                    "pool_identifier",
                    "token_in_denom",
                    "token_out_denom"
                  ],
                  "properties": {
                    "pool_identifier": {
                      "type": "string"
                    },
                    "token_in_denom": {
                      "type": "string"
                    },
                    "token_out_denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SwapRouteResponse": {
          "type": "object",
          "required": [
            "ask_asset_denom",
            "offer_asset_denom",
            "swap_route"
          ],
          "properties": {
            "ask_asset_denom": {
              "type": "string"
            },
            "offer_asset_denom": {
              "type": "string"
            },
            "swap_route": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
