{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FlowResponse",
  "type": "object",
  "properties": {
    "flow": {
      "description": "The flow that was searched for.",
      "anyOf": [
        {
          "$ref": "#/definitions/Flow"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Curve": {
      "description": "The type of distribution curve to exist.",
      "oneOf": [
        {
          "description": "A linear curve that releases assets as we approach the end of the flow period.",
          "type": "string",
          "enum": [
            "linear"
          ]
        }
      ]
    },
    "Flow": {
      "description": "Represents a flow.",
      "type": "object",
      "required": [
        "asset_history",
        "claimed_amount",
        "curve",
        "emitted_tokens",
        "end_epoch",
        "flow_asset",
        "flow_creator",
        "flow_id",
        "start_epoch"
      ],
      "properties": {
        "asset_history": {
          "description": "A map containing the amount of tokens it was expanded to at a given epoch. This is used to calculate the right amount of tokens to distribute at a given epoch when a flow is expanded.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Uint128"
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "claimed_amount": {
          "description": "The amount of the `flow_asset` that has been claimed so far.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "curve": {
          "description": "The type of curve the flow has.",
          "allOf": [
            {
              "$ref": "#/definitions/Curve"
            }
          ]
        },
        "emitted_tokens": {
          "description": "emitted tokens",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Uint128"
          }
        },
        "end_epoch": {
          "description": "The epoch at which the flow ends.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "flow_asset": {
          "description": "The asset the flow was created to distribute.",
          "allOf": [
            {
              "$ref": "#/definitions/Asset"
            }
          ]
        },
        "flow_creator": {
          "description": "The account which opened the flow and can manage it.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "flow_id": {
          "description": "A unique identifier of the flow.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "flow_label": {
          "description": "An alternative flow label.",
          "type": [
            "string",
            "null"
          ]
        },
        "start_epoch": {
          "description": "The epoch at which the flow starts.",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
