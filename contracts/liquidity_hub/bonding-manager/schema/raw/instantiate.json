{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "bonding_assets",
    "grace_period",
    "growth_rate",
    "unbonding_period"
  ],
  "properties": {
    "bonding_assets": {
      "description": "[String] denoms of the assets that can be bonded.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "grace_period": {
      "description": "Grace period the maximum age of a bucket before fees are forwarded from it",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "growth_rate": {
      "description": "Weight grow rate. Needs to be between 0 and 1.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "unbonding_period": {
      "description": "Unbonding period in nanoseconds.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
