{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns the [Config] of te contract.",
      "type": "string",
      "enum": [
        "config"
      ]
    },
    {
      "description": "Returns the amount of assets that have been bonded by the specified address.",
      "type": "object",
      "required": [
        "bonded"
      ],
      "properties": {
        "bonded": {
          "type": "object",
          "properties": {
            "address": {
              "description": "The address to check for bonded assets. If none is provided, all bonded assets in the contract are returned.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the amount of tokens of the given denom that are been unbonded by the specified address. Allows pagination with start_after and limit.",
      "type": "object",
      "required": [
        "unbonding"
      ],
      "properties": {
        "unbonding": {
          "type": "object",
          "required": [
            "address",
            "denom"
          ],
          "properties": {
            "address": {
              "description": "The address to check for unbonding assets.",
              "type": "string"
            },
            "denom": {
              "description": "The denom to check for unbonding assets.",
              "type": "string"
            },
            "limit": {
              "description": "The maximum amount of unbonding assets to return.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint8",
              "minimum": 0.0
            },
            "start_after": {
              "description": "The amount of unbonding assets to skip. Allows pagination.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the amount of unbonding tokens of the given denom for the specified address that can be withdrawn, i.e. that have passed the unbonding period.",
      "type": "object",
      "required": [
        "withdrawable"
      ],
      "properties": {
        "withdrawable": {
          "type": "object",
          "required": [
            "address",
            "denom"
          ],
          "properties": {
            "address": {
              "description": "The address to check for withdrawable assets.",
              "type": "string"
            },
            "denom": {
              "description": "The denom to check for withdrawable assets.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the weight of the address.",
      "type": "object",
      "required": [
        "weight"
      ],
      "properties": {
        "weight": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "description": "The address to check for weight.",
              "type": "string"
            },
            "global_index": {
              "description": "The global index to check for weight. If none is provided, the current global index is used.",
              "anyOf": [
                {
                  "$ref": "#/definitions/GlobalIndex"
                },
                {
                  "type": "null"
                }
              ]
            },
            "timestamp": {
              "description": "The timestamp to check for weight. If none is provided, the current block time is used.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the global index of the contract.",
      "type": "string",
      "enum": [
        "global_index"
      ]
    },
    {
      "description": "Returns the [Epoch]s that can be claimed by an address.",
      "type": "object",
      "required": [
        "claimable"
      ],
      "properties": {
        "claimable": {
          "type": "object",
          "properties": {
            "address": {
              "description": "The address to check for claimable epochs. If none is provided, all possible epochs stored in the contract that can potentially be claimed are returned.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the contract's ownership information",
      "type": "object",
      "required": [
        "ownership"
      ],
      "properties": {
        "ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "GlobalIndex": {
      "type": "object",
      "required": [
        "bonded_amount",
        "bonded_assets",
        "timestamp",
        "weight"
      ],
      "properties": {
        "bonded_amount": {
          "description": "The total amount of tokens bonded in the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "bonded_assets": {
          "description": "Assets that are bonded in the contract.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "timestamp": {
          "description": "The timestamp at which the total bond was registered.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "weight": {
          "description": "The total weight of the bond at the given block height.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
