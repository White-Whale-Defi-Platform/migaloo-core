{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "bonding_assets",
    "distribution_denom",
    "epoch_manager_addr",
    "grace_period",
    "growth_rate",
    "pool_manager_addr",
    "unbonding_period"
  ],
  "properties": {
    "bonding_assets": {
      "description": "Denom of the asset to be bonded. Can't only be set at instantiation.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "distribution_denom": {
      "description": "Distribution denom for the rewards",
      "type": "string"
    },
    "epoch_manager_addr": {
      "description": "Epoch Manager contract address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "grace_period": {
      "description": "Grace period the maximum age of a reward bucket before it's considered expired and fees are forwarded from it",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "growth_rate": {
      "description": "A fraction that controls the effect of time on the weight of a bond. If the growth rate is set to zero, time will have no impact on the weight.",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "pool_manager_addr": {
      "description": "Pool Manager contract address for swapping",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "unbonding_period": {
      "description": "Unbonding period in nanoseconds. The time that needs to pass before an unbonded position can be withdrawn",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    }
  }
}
