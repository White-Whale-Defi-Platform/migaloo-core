{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "The instantiation message",
  "type": "object",
  "required": [
    "lp_token_type",
    "owner",
    "vault_creation_fee",
    "whale_lair_addr"
  ],
  "properties": {
    "lp_token_type": {
      "description": "The type of LP token to use, whether a cw20 token or a token factory token",
      "allOf": [
        {
          "$ref": "#/definitions/LpTokenType"
        }
      ]
    },
    "owner": {
      "description": "The owner of the contract",
      "type": "string"
    },
    "vault_creation_fee": {
      "description": "The fee to create a vault",
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        }
      ]
    },
    "whale_lair_addr": {
      "description": "The whale lair address, where protocol fees are distributed",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Asset": {
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "info": {
          "$ref": "#/definitions/AssetInfo"
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LpTokenType": {
      "description": "The type of LP token to use, whether a cw20 token or a token factory token",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "token_factory"
          ]
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
